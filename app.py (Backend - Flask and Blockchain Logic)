from flask import Flask, render_template, request, jsonify
from web3 import Web3

# Connect to an Ethereum node (local or remote)
web3 = Web3(Web3.HTTPProvider('http://localhost:8545'))  # Replace with your provider URL

# Check if connected to Ethereum node
if not web3.isConnected():
    raise Exception("Failed to connect to Ethereum network")

# Set up the voting contract address and ABI (Example values, replace with your contract details)
contract_address = '0xYourContractAddress'
contract_abi = [
    {
        "constant": False,
        "inputs": [
            {"name": "candidate_id", "type": "uint256"}
        ],
        "name": "vote",
        "outputs": [],
        "payable": False,
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "constant": True,
        "inputs": [
            {"name": "candidate_id", "type": "uint256"}
        ],
        "name": "getVotes",
        "outputs": [
            {"name": "", "type": "uint256"}
        ],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }
]

# Initialize the contract
contract = web3.eth.contract(address=contract_address, abi=contract_abi)

app = Flask(__name__)

# Route to render the voting page
@app.route('/')
def index():
    return render_template('index.html')

# Route to handle the voting logic
@app.route('/vote', methods=['POST'])
def vote():
    candidate_id = int(request.form['candidate_id'])
    # Replace with your wallet address and private key for signing transactions
    account = '0xYourAccountAddress'
    private_key = 'YourPrivateKey'

    # Create the transaction to call the vote function
    txn = contract.functions.vote(candidate_id).buildTransaction({
        'from': account,
        'gas': 2000000,
        'gasPrice': web3.toWei('20', 'gwei'),
        'nonce': web3.eth.getTransactionCount(account),
    })

    # Sign the transaction
    signed_txn = web3.eth.account.signTransaction(txn, private_key)

    # Send the transaction to the Ethereum network
    txn_hash = web3.eth.sendRawTransaction(signed_txn.rawTransaction)

    return jsonify({'status': 'success', 'txn_hash': txn_hash.hex()})

# Route to get vote count for a candidate
@app.route('/get_votes/<int:candidate_id>', methods=['GET'])
def get_votes(candidate_id):
    votes = contract.functions.getVotes(candidate_id).call()
    return jsonify({'votes': votes})

if __name__ == '__main__':
    app.run(debug=True)
